In Django, signals are executed synchronously by default. This means that when a signal is sent, the connected receiver functions are called immediately 
in the same thread as the sender, blocking further execution until all receivers have finished processing.
CODE SNIPPET :-
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.db import models
# Sample model
class MyModel(models.Model):
    name = models.CharField(max_length=100)
# Signal receiver
@receiver(post_save, sender=MyModel)
def my_signal_receiver(sender, instance, created, **kwargs):
    print("Signal received! Instance:", instance.name)
# Example usage
if __name__ == "__main__":
    # Simulate creating a new instance
    instance = MyModel(name="Test Instance")
    instance.save()  # This triggers the post_save signal
    print("This line prints after the signal receiver completes.")
